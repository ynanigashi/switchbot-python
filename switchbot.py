import time
import hashlib
import hmac
import base64
import uuid
import configparser

import requests

def main():
    base_url, token, secret = get_config()

    url = "{}/v1.1/devices".format(base_url)
    headers = make_headers(token, secret)
    res  = requests.get(url, headers=headers).json()
    devices = res['body']['deviceList']
    meters = []
    
    for device in devices:
        if device['deviceType'] == 'MeterPlus' or device['deviceType'] == 'Meter':
            meters.append(device)
    
    # print(meterplus_ids)
    for meter in meters:
        url = "{}/v1.1/devices/{}/status".format(base_url, meter['deviceId'])
        res = requests.get(url, headers=headers).json()
        print('=======================================')
        print('名前: {}'.format(meter['deviceName']))
        print('気温: {} ℃'.format(res['body']['temperature']))
        print('湿度: {} %'.format(res['body']['humidity']))
        print('=======================================')

def get_config():
    config_ini = configparser.ConfigParser()
    config_ini.read('config.ini', encoding='utf-8')
    base_url = config_ini['switchbot']['url']
    token = config_ini['switchbot']['token']
    secret = config_ini['switchbot']['secret']

    return base_url, token, secret


def make_auth_data(token: str, secret: str):
    # A random UUID generated by developers themselves to blend into the string to sign.
    nonce = str(uuid.uuid4())
    t = int(round(time.time() * 1000))
    string_to_sign = '{}{}{}'.format(token, t, nonce)

    string_to_sign = bytes(string_to_sign, 'utf-8')
    secret = bytes(secret, 'utf-8')

    sign = base64.b64encode(hmac.new(secret, msg=string_to_sign, digestmod=hashlib.sha256).digest())

    return sign, str(t), nonce

def make_headers(token: str, secret: str):
    sign,t,nonce = make_auth_data(token, secret)
    headers={
            "Authorization": token,
            "sign": sign,
            "t": str(t),
            "nonce": nonce,
        }
    return headers

if __name__ == '__main__':
    main()

